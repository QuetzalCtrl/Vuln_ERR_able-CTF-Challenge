# -*- mode: ruby -*-
# vi: set ft=ruby :

# All Vagrant configuration is done below. The "2" in Vagrant.configure
# configures the configuration version (we support older styles for
# backwards compatibility). Please don't change it unless you know what
# you're doing.
Vagrant.configure("2") do |config|
  # The most common configuration options are documented and commented below.
  # For a complete reference, please see the online documentation at
  # https://docs.vagrantup.com.

  # Every Vagrant development environment requires a box. You can search for
  # boxes at https://vagrantcloud.com/search.
  config.vm.box = "bento/ubuntu-20.04"
  config.vm.hostname = "vuln-err-able"
  # Disable automatic box update checking. If you disable this, then
  # boxes will only be checked for updates when the user runs
  # `vagrant box outdated`. This is not recommended.
  # config.vm.box_check_update = false

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine. In the example below,
  # accessing "localhost:8080" will access port 80 on the guest machine.
  # NOTE: This will enable public access to the opened port
  # config.vm.network "forwarded_port", guest: 80, host: 8080

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine and only allow access
  # via 127.0.0.1 to disable public access
  # config.vm.network "forwarded_port", guest: 80, host: 8080, host_ip: "127.0.0.1"

  # Create a private network, which allows host-only access to the machine
  # using a specific IP.
  config.vm.network "private_network", ip: "192.168.56.80"

  # Create a public network, which generally matched to bridged network.
  # Bridged networks make the machine appear as another physical device on
  # your network.
  # config.vm.network "public_network"

  # Share an additional folder to the guest VM. The first argument is
  # the path on the host to the actual folder. The second argument is
  # the path on the guest to mount the folder. And the optional third
  # argument is a set of non-required options.
  config.vm.synced_folder "../data", "/data"

  # Provider-specific configuration so you can fine-tune various
  # backing providers for Vagrant. These expose provider-specific options.
  # Example for VirtualBox:
  #
  # config.vm.provider "virtualbox" do |vb|
  #   # Display the VirtualBox GUI when booting the machine
  #   vb.gui = true
  #
  #   # Customize the amount of memory on the VM:
  #   vb.memory = "1024"
  # end
  #
  # View the documentation for the provider you are using for more
  # information on available options.

  # Enable provisioning with a shell script. Additional provisioners such as
  # Ansible, Chef, Docker, Puppet and Salt are also available. Please see the
  # documentation for more information about their specific syntax and use.
  config.vm.provision "shell", inline: <<-SHELL
    apt-get update
    apt-get install pip nginx python3-waitress -y
    useradd -m flaskit
    bash -c "echo 'flaskit:P@sSw0rD_w@Y_t0o_l0nG_t0_BrUt3f0rC3' | chpasswd"
    usermod -a -G sudo flaskit
    usermod -a -G www-data flaskit
    echo "flaskit ALL=(ALL) NOPASSWD: /bin/sed" >> /etc/sudoers
    cp -r /data/flaskapp /home/flaskit
    chown flaskit:flaskit /home/flaskit/flaskapp
    chown flaskit:flaskit /home/flaskit/flaskapp/*
    sudo -u flaskit pip install flask waitress
    cp /data/flaskapp.service /etc/systemd/system/
    systemctl daemon-reload
    systemctl enable flaskapp.service
    systemctl start flaskapp.service
    cp /data/flaskapp-nginx /etc/nginx/sites-available/
    ln -s /etc/nginx/sites-available/flaskapp-nginx /etc/nginx/sites-enabled/
    unlink /etc/nginx/sites-enabled/default
    nginx -s reload
    echo "f7a03995bcbfb00971314293eeac7202" > /home/flaskit/user.txt
    chown flaskit:flaskit /home/flaskit/user.txt
    chmod 400 /home/flaskit/user.txt
    echo "bf2ae566e364a905320c401ef95528cd" > /root/root.txt
    chmod 400 /root/root.txt
    userdel -rfRZ vagrant
    umount /data
    systemctl stop sshd
  SHELL
end
